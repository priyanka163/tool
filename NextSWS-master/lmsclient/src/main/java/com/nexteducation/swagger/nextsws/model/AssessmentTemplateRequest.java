/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.nexteducation.swagger.nextsws.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.nexteducation.swagger.nextsws.model.AssessmentTemplateMasterRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * AssessmentTemplateRequest
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-15T17:16:40.307+05:30")
public class AssessmentTemplateRequest   {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("jspPath")
  private String jspPath = null;

  @SerializedName("methodName")
  private String methodName = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("pageBreaks")
  private String pageBreaks = null;

  @SerializedName("templateMaster")
  private List<AssessmentTemplateMasterRequest> templateMaster = new ArrayList<AssessmentTemplateMasterRequest>();

  @SerializedName("thumbnailImageUrl")
  private String thumbnailImageUrl = null;

  public AssessmentTemplateRequest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public AssessmentTemplateRequest jspPath(String jspPath) {
    this.jspPath = jspPath;
    return this;
  }

   /**
   * Get jspPath
   * @return jspPath
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getJspPath() {
    return jspPath;
  }

  public void setJspPath(String jspPath) {
    this.jspPath = jspPath;
  }

  public AssessmentTemplateRequest methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getMethodName() {
    return methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }

  public AssessmentTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AssessmentTemplateRequest pageBreaks(String pageBreaks) {
    this.pageBreaks = pageBreaks;
    return this;
  }

   /**
   * Get pageBreaks
   * @return pageBreaks
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getPageBreaks() {
    return pageBreaks;
  }

  public void setPageBreaks(String pageBreaks) {
    this.pageBreaks = pageBreaks;
  }

  public AssessmentTemplateRequest templateMaster(List<AssessmentTemplateMasterRequest> templateMaster) {
    this.templateMaster = templateMaster;
    return this;
  }

  public AssessmentTemplateRequest addTemplateMasterItem(AssessmentTemplateMasterRequest templateMasterItem) {
    this.templateMaster.add(templateMasterItem);
    return this;
  }

   /**
   * Get templateMaster
   * @return templateMaster
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<AssessmentTemplateMasterRequest> getTemplateMaster() {
    return templateMaster;
  }

  public void setTemplateMaster(List<AssessmentTemplateMasterRequest> templateMaster) {
    this.templateMaster = templateMaster;
  }

  public AssessmentTemplateRequest thumbnailImageUrl(String thumbnailImageUrl) {
    this.thumbnailImageUrl = thumbnailImageUrl;
    return this;
  }

   /**
   * Get thumbnailImageUrl
   * @return thumbnailImageUrl
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getThumbnailImageUrl() {
    return thumbnailImageUrl;
  }

  public void setThumbnailImageUrl(String thumbnailImageUrl) {
    this.thumbnailImageUrl = thumbnailImageUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentTemplateRequest assessmentTemplateRequest = (AssessmentTemplateRequest) o;
    return Objects.equals(this.id, assessmentTemplateRequest.id) &&
        Objects.equals(this.jspPath, assessmentTemplateRequest.jspPath) &&
        Objects.equals(this.methodName, assessmentTemplateRequest.methodName) &&
        Objects.equals(this.name, assessmentTemplateRequest.name) &&
        Objects.equals(this.pageBreaks, assessmentTemplateRequest.pageBreaks) &&
        Objects.equals(this.templateMaster, assessmentTemplateRequest.templateMaster) &&
        Objects.equals(this.thumbnailImageUrl, assessmentTemplateRequest.thumbnailImageUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, jspPath, methodName, name, pageBreaks, templateMaster, thumbnailImageUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentTemplateRequest {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jspPath: ").append(toIndentedString(jspPath)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageBreaks: ").append(toIndentedString(pageBreaks)).append("\n");
    sb.append("    templateMaster: ").append(toIndentedString(templateMaster)).append("\n");
    sb.append("    thumbnailImageUrl: ").append(toIndentedString(thumbnailImageUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

